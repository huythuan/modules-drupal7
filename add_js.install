<?php
/**
 * @file
 * Install, update, and uninstall functions for the add_js module.
 */

/**
 * Implements hook_install().
 */
function add_js_install() {
  $t = get_t();
  drupal_set_message(
    $t(
      'Add JS module succesfully installed. Visit the <a href="@link">configuration page</a>.',
      array(
        '@link' => url('admin/config/content/add-js/configuration'),
      )
    )
  );
}

/**
 * @file add_js.install
 *
 * Install, update and uninstall functions for the add_js module.
 */

/**
 * Implements hook_schema().
 */
function add_js_schema() {
  $schema['add_js_rule'] = array(
    'description' => t('Table storing ADD JS rule definitions.'),
    'export' => array(
      'key' => 'name',
      'primary key' => 'id',
      'identifier' => 'rule', // Exports will be defined as $rule
      'default hook' => 'add_js_rule',
      'save callback' => 'add_js_rule_save',
      'delete callback' => 'add_js_rule_delete',
      'api' => array(
        'owner' => 'add_js',
        'api' => 'add_js_rules',  // Base name for api include files.
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
    'fields' => array(
	'id' => array(
	     'type' => 'serial',
	      'unsigned' => TRUE,
	      'not null' => TRUE,
	      'description' => 'The primary identifier for the JS injection rule',
	      'no export' => TRUE, // do not export database-only keys.
	   ),
      'name' => array(
        'type' => 'varchar',
        'length' => '255',
        'description' => 'Unique ID for rules. Used to identify them programmatically.',
      ),
      
      'description' => array(
        'type' => 'varchar',
        'length' => '255',
        'description' => 'A human readable name of a rule.',
      ),
	  'add_js' => array(
        'description' => 'Adding js to a site.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'js' => array(
        'type' => 'text',
        'size' => 'big',
        'description' => 'The actual JavaScript code.',
      ),
      'position' => array(
        'type' => 'varchar',
        'length' => '255',
        'description' => 'The scope of the JavaScript on the page (e.g. header or footer).',
      ),
      'preprocess' => array(
        'description' => 'Boolean indicating whether the rule should be aggregated into other JS files.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'inline' => array(
        'description' => 'Boolean indicating whether the rules should be inline (cannot be aggregated).',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
	//custom for news site
	'site_visibility' => array(
        'description' => 'site visibility for js code.',
        'type' => 'text',
		'length' => '255',
        'not null' => FALSE,
      ),
	//end custom for news site
	'add_block' => array(
        'description' => 'Adding a block to a region.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
	'block_content' => array(
        'type' => 'text',
        'size' => 'big',
        'description' => 'The actual block code.',
      ),
	'block_weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'medium',
      ),
	'block_region' => array(
        'type' => 'varchar',
        'length' => '255',
        'description' => 'The region of the block added',
      ),
      'page_visibility' => array(
        'description' => 'Boolean indicating whether the rule has a white or black list for page visibility.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'page_visibility_pages' => array(
        'type' => 'text',
        'size' => 'big',
        'description' => 'A list of pages to either hide or show the JavaScript.',
      ),
	'code_visibility' => array(
        'description' => 'Boolean indicating whether the js code enable or disable.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
		'size' => 'tiny',
      ),
    ),
    'primary key' => array('id'),
  );
  return $schema;
}

/**
 * Adding visibility field.
 */
function add_js_update_7000() {
  // Add the visibility field to the db.
  if (!db_field_exists('add_js_rule', 'visibility')) {
    db_add_field('add_js_rule', 'visibility',
      array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
        'size' => 'tiny',
      )
    );
  }
}

/**
 * Implements hook_uninstall().
 *
 * This is required to cleanup the left over files
 */
function add_js_uninstall() {
  ctools_include('export');
  $rules = ctools_export_load_object('add_js_rule');
  foreach ($rules as $name => $rule) {
    file_unmanaged_delete(_add_js_rule_path($rule->id));
  }
}

/**
 * Implements hook_requirements().
 *
 * We'll use this to prevent installation of the module if the file directory
 * is not available and writable.
 */
function add_js_requirements($phase) {
  $requirements = array();
  if ($phase == 'runtime') {
    $requirements['add_js_cache_dir'] = array(
      'title' => t('ADD JS cache dir'),
      'severity' => REQUIREMENT_OK,
      'value' => t('Exists'),
    );

    $path = 'public://add_js';
    if (!file_prepare_directory($path, FILE_CREATE_DIRECTORY)) {
      $requirements['add_js_cache_dir']['description'] = t('The ADD JS cache directory, %path could not be created due to a misconfigured files directory. Please ensure that the files directory is correctly configured and that the webserver has permission to create directories.', array('%path' => file_uri_target($path)));
      $requirements['add_js_cache_dir']['severity'] = REQUIREMENT_ERROR;
      $requirements['add_js_cache_dir']['value'] = t('Unable to create');
    }
  }

  return $requirements;
}
