<?php
$block_info =array();//array store the block to add to a page
/**
 * @file
 * This module allows users to place dynamic block to a region.
 */

/**
 * Implements hook_permission().
 */
function add_block_permission() {
  return array(
    'view add block' => array(
      'title' => t('View add block'),
    ),
    'create add block' => array(
      'title' => t('Create add block'),
    ),
    'edit add block' => array(
      'title' => t('Edit add block'),
    ),
    'delete add block' => array(
      'title' => t('Delete add block'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function add_block_menu() {
  $items  = array();

  $items['admin/config/content/add-block'] = array(
    'title' => 'add block',
    'description' => 'Administer Add Block',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('add_block_list_page_form'),
    'access arguments' => array('view add block'),
    'file' => 'add_block.admin.inc',
  );

  $items['admin/config/content/add-block/list'] = array(
    'title' => 'List',
    'description' => 'Add Block',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('add_block_list_page_form'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'add_block.admin.inc',
  );

  $items['admin/config/content/add-block/add']  = array(
    'title' => 'Add new block code',
    'description' => 'Add code',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('add_block_add_form'),
    'access arguments' => array('create add block'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'add_block.admin.inc',
  );
  $items['admin/config/content/add-block/edit/%'] = array(
    'title' => 'Edit block code',
    'description' => 'Code edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('add_block_add_form', 5),
    'access arguments' => array('edit block code'),
    'type' => MENU_CALLBACK,
    'file' => 'add_block.admin.inc',
  );

  $items['admin/config/content/add-block/delete/%'] = array(
    'title' => 'Are you sure you want to delete this code?',
    'description' => 'Code delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('add_block_del_form', 5),
    'access arguments' => array('delete block code'),
    'type' => MENU_CALLBACK,
    'file' => 'add_block.admin.inc',
  );

   return $items;
}
/**
 * Implements hook_menu_local_tasks_alter().
 */
function add_block_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action block code to 'admin/config/content/add-block/add'
  // on 'admin/config/content/add-block/list' page.
  if ($root_path == 'admin/config/content/add-block') {
    $item = menu_get_item('admin/config/content/add-block/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}
/**
 * Add/Update block code to DB.
 */
function add_block_add_update_code($action, $values, $id = NULL) {
  if ($action == 'insert') {
    drupal_write_record('add_block_rule', $values);
  }
  elseif ($action == 'update') {
    $values['id'] = $id;
    drupal_write_record('add_block_rule', $values, 'id');
  }
}

/**
 * Get block code from DB.
 */
function add_block_get_code($id = NULL, $header = array(), $limit = NULL) {
  if ($id) {
    $query = db_select('add_block_rule', 'ab')
      ->fields('ab')
      ->condition('id', $id, '=')
      ->execute()
      ->fetchAll();
  }
  elseif (empty($id) && empty($header) && empty($limit)) {
    $query = db_select('add_block_rule', 'ab')
      ->fields('ab')
      ->execute()
      ->fetchAll();
  }
  else {
    $query = db_select('add_block_rule', 'ab')
      ->extend('PagerDefault')
        ->limit($limit)
      ->extend('TableSort')
        ->orderByHeader($header)
      ->fields('ab')
      ->execute()
      ->fetchAll();
  }
  $codes = array();
  if (count($query) > 0) {
    foreach ($query as $value) {
      $codes[$value->id] = $value;
    }
  }
  return $codes;
}
/**
 * Delete block code from DB.
 */
function add_block_del_code($id) {
  db_delete('add_block_rule')->condition('id', $id)->execute();
}






function add_block_init() {
  // load all the rules
  ctools_include('export');
  $rules = ctools_export_load_object('add_block_rule');

  foreach ($rules as $name => $rule) {
  	
	// check if the code visibility is disabled  if so skip it
		    if ($rule->code_visibility == FALSE) {
		      continue;
		    }
			if (_add_block_visibility_pages($rule) == FALSE){
				continue;
			}
		    //add block to array
	
				global $block_info;
				$content = array();
				$content[$rule->region]=$rule->block;
				$block_info[]= $content;
				
	}

		  

}


/**
 * Based on visibility setting this function returns TRUE if the ADD block 
 * rule code should be added to the current page and otherwise FALSE.
 *
 */

function _add_block_visibility_pages($rule) {
  $visibility = $rule->page_visibility;
  $setting_pages = $rule->page_visibility_pages;

//print('$setting_pages');
  // Match path if necessary.
  if (!empty($setting_pages)) {
    // Convert path to lowercase. This allows comparison of the same path
    // with different case. Ex: /Page, /page, /PAGE.
    $pages = drupal_strtolower($setting_pages);
    if ($visibility < 2) {
      // Convert the Drupal path to lowercase
      $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
      // Compare the lowercase internal and lowercase path alias (if any).
      $page_match = drupal_match_path($path, $pages);
      if ($path != $_GET['q']) {
        $page_match = $page_match || drupal_match_path($_GET['q'], $pages);
      }
      // When $visibility has a value of 0, the tracking code is displayed on
      // all pages except those listed in $pages. When set to 1, it
      // is displayed only on those pages listed in $pages.
      $page_match = !($visibility xor $page_match);
    }
    elseif (module_exists('php')) {
      $page_match = php_eval($setting_pages);
    }
    else {
      $page_match = FALSE;
    }
  }
  else {
    $page_match = TRUE;
  }

  return $page_match;
}


/**
 * modify hook_page_build to add the block
 *
 */


function add_block_page_build(&$page) {
	global $block_info;
	$i=100;
	if(isset($block_info)){
	foreach($block_info as $key => $content){
		foreach($content as $region => $info){
	     $page[$region][$i++] = array(
	      '#markup' => $info,
	      '#weight' => -1000,
		          );
	          }
	       }
	    }
	$block_info = array(); //empty array;
}








